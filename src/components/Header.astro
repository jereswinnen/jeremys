---
const { class: className, ...rest } = Astro.props;
const currentPath = Astro.url.pathname;

const navItems = [
  { path: "/", label: "Work" },
  { path: "/info", label: "Info" },
  // { path: "/blog", label: "Blog" },
  // { path: "/contact", label: "Contact" },
  { isCopyable: true, path: "mailto:hey@jeremys.be", label: "hey@jeremys.be" },
];
---

<header
  class:list={["grid grid-cols-subgrid gap-y-0 z-[500] text-sm", className]}
  {...rest}
>
  <a
    href="/"
    class="col-span-1 md:!col-span-2 pt-4 font-medium uppercase tracking-wide"
    >Jeremys</a
  >
  <nav class="col-span-1 md:!col-span-4 md:!col-start-5 grid grid-cols-subgrid">
    <ul class="col-span-full grid grid-cols-subgrid">
      {
        navItems.map(({ isCopyable, path, label }) => (
          <li class="group relative">
            <a
              {...(isCopyable ? { "data-copyEmail": "" } : {})}
              href={path}
              class:list={[
                "flex pl-3 pt-4 opacity-70 transition-all duration-500 ease-circ hover:opacity-100",
                currentPath === path && "font-medium",
              ]}
            >
              <span>{label}</span>
            </a>
            <div class="absolute top-0 left-0 w-[1px] h-full [&>*]:absolute [&>*]:block [&>*]:w-[1px]">
              <span class="h-0 bg-stone-950 dark:bg-white transition-all duration-500 ease-circ group-hover:h-full" />
              <span
                class:list={[
                  "h-full bg-stone-950/20 dark:bg-white/20",
                  currentPath === path && "!bg-stone-950 dark:!bg-white",
                ]}
              />
            </div>
          </li>
        ))
      }
    </ul>
  </nav>
</header>
