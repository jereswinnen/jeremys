---
import { Picture } from "astro:assets";
import { getProjectImage } from "../utils/projectUtils";
import type { CollectionEntry } from "astro:content";

interface Props {
  project: CollectionEntry<"work">["data"];
}

interface ImageBlock {
  type: "image";
  src: string;
  caption?: string;
  colSpan?: number;
  mdColSpan?: number;
  lgColSpan?: number;
}

const { project } = Astro.props;

const imageBlocks = project.blocks.filter(
  (block: any): block is ImageBlock => block.type === "image"
);
// const processedImages = await Promise.all(
//   imageBlocks.map(async (block: ImageBlock) => ({
//     image: await getProjectImage(project.name, block.src),
//     caption: block.caption,
//     colSpan: block.colSpan,
//     mdColSpan: block.mdColSpan,
//     lgColSpan: block.lgColSpan,
//   }))
// );
const processedImages = imageBlocks.map((block: ImageBlock) => ({
  imageSrc: block.src,
  caption: block.caption,
  colSpan: block.colSpan,
  mdColSpan: block.mdColSpan,
  lgColSpan: block.lgColSpan,
}));
---

<section
  class="col-span-full grid grid-cols-subgrid !gap-[calc(var(--u-grid-gap)/2)] pt-6 border-t border-stone-900 dark:border-white/20"
>
  <header
    class="col-span-full grid grid-cols-subgrid text-sm [&>*]:flex [&>*]:flex-col [&>*]:gap-1 [&>*>*:first-child]:mb-0 [&>*>*:first-child]:opacity-70 [&>*>*:last-child]:font-medium"
  >
    <div><p>Name</p><p>{project.name}</p></div>
    <div class="col-span-2">
      <p>Info</p><p class="!font-normal text-base">{project.description}</p>
    </div>
    <div class="col-start-7">
      <p>Role</p><p>{project.role}</p>
    </div>
    <div class="col-start-8">
      <p>Timeframe</p>
      <div class="flex gap-1">
        <span>{project.startDate}</span>
        <span class="font-[system-ui,sans-serif] font-normal opacity-50"
          >&rarr;</span
        >
        <span>{project.endDate}</span>
      </div>
    </div>
  </header>

  <div
    class="col-span-full grid grid-cols-subgrid !gap-[calc(var(--u-grid-gap)/5)]"
  >
    {
      processedImages.map(async (item) => {
        const image = await getProjectImage(project.name, item.imageSrc);
        return (
          <div
            class={`flex items-center p-8 bg-stone-50 dark:bg-stone-900/50
            ${item.colSpan ? `col-span-${item.colSpan}` : ""}
            ${item.mdColSpan ? `md:col-span-${item.mdColSpan}` : ""}
            ${item.lgColSpan ? `lg:col-span-${item.lgColSpan}` : ""}`}
          >
            <div class="flex flex-col items-center">
              <Picture
                data-imageBlurReveal
                loading="lazy"
                decoding="async"
                src={image}
                alt={item.caption || project.name}
                formats={["avif", "webp"]}
                class="max-h-[60vh] lg:max-h-[40vh] object-contain"
              />
              {/* {item.caption && (
              <p class="text-sm font-medium text-center opacity-60">
                {item.caption}
              </p>
            )} */}
            </div>
          </div>
        );
      })
    }
  </div>
</section>
