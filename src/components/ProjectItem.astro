---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import Action from "../components/Action";
import { getProjectImagePath, formatProjectSlug } from "../utils/projectUtils";
import type { ImageLayout, Role, Artwork } from "../types/project";
import { BookmarkSimple } from "phosphor-react";

interface Props {
  project: CollectionEntry<"work">;
  imageLayout?: ImageLayout[];
  class?: string;
}

const { project, imageLayout, class: className } = Astro.props;
const { name, tagline, description, role, linkLabel, linkAction, artwork } =
  project.data;

// Helper function to get grid classes for an image
const getImageClasses = (index: number) => {
  const config = imageLayout?.find((layout) => layout.index === index);
  if (!config) return "col-span-6"; // Default layout

  const classes = [];

  // Base spans and starts
  if (config.span) classes.push(`col-span-${config.span}`);
  if (config.start) classes.push(`col-start-${config.start}`);

  // Responsive spans
  if (config.spanSm) classes.push(`sm:col-span-${config.spanSm}`);
  if (config.spanMd) classes.push(`md:col-span-${config.spanMd}`);
  if (config.spanLg) classes.push(`lg:col-span-${config.spanLg}`);
  if (config.spanXl) classes.push(`xl:col-span-${config.spanXl}`);

  // Responsive starts
  if (config.startSm) classes.push(`sm:col-start-${config.startSm}`);
  if (config.startMd) classes.push(`md:col-start-${config.startMd}`);
  if (config.startLg) classes.push(`lg:col-start-${config.startLg}`);
  if (config.startXl) classes.push(`xl:col-start-${config.startXl}`);

  return classes.join(" ");
};
---

<article class:list={["", className]}>
  <!-- Project Info -->
  <header class="col-span-full flex flex-col gap-6" data-header>
    <h2 class="blur-animate text-4xl font-black">
      {name}
      <span aria-hidden="true" class="font-medium opacity-20">/</span>
      <span class="font-medium">{tagline}</span>
    </h2>

    <div class="flex flex-col gap-2">
      <p class="blur-animate opacity-70">{description}</p>
      <!-- {
        linkAction && (
          <Action
            className="blur-animate"
            icon={BookmarkSimple}
            label={linkLabel}
            href={linkAction}
          />
        )
      } -->
      <aside class="blur-animate flex flex-col gap-1">
        <h3 class="font-medium text-sm">Capabilities</h3>
        <ul class="flex flex-col gap-1 list-circle list-inside">
          {
            role.map((r: Role) => (
              <li class="text-sm">
                {/* <span class="opacity-40">#</span> */}
                {r.tag}
              </li>
            ))
          }
        </ul>
      </aside>
    </div>
  </header>

  <!-- Project Images -->
  <div class="col-span-full o-grid-inner">
    {
      artwork.map((art: Artwork, index: number) => (
        <div
          class={`${getImageClasses(index)} bg-zinc-100 p-[calc(1rem+0.75vmax)] h-fit flex flex-col`}
          data-image-container
        >
          <Image
            src={getProjectImagePath(name, art.src)}
            alt={art.caption || name}
            width={800}
            height={600}
            class="w-full max-h-[60vh] object-contain"
          />
          {art.caption && (
            <p class="mt-2 text-sm text-gray-500">{art.caption}</p>
          )}
        </div>
      ))
    }
  </div>
</article>

<!-- <script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  // Wait for initial page animations
  window.addEventListener("load", () => {
    // Add a small delay to ensure main page animations are complete
    setTimeout(() => {
      // Select all headers
      const headers = document.querySelectorAll("[data-header]");
      // Select all project image containers
      const projectContainers = document.querySelectorAll(
        "[data-image-container]"
      );

      // Header animations
      headers.forEach((header) => {
        const titleElements = header.querySelectorAll(".blur-animate");

        gsap.fromTo(
          titleElements,
          {
            opacity: 0,
            filter: "blur(8px)",
            y: 20,
          },
          {
            opacity: 1,
            filter: "blur(0px)",
            y: 0,
            duration: 0.8,
            stagger: 0.2,
            ease: "sine.out",
            scrollTrigger: {
              trigger: header,
              start: "top bottom-=300",
              toggleActions: "play complete none none",
              markers: false,
            },
          }
        );
      });

      // Image container animations
      projectContainers.forEach((container) => {
        gsap.fromTo(
          container,
          {
            opacity: 0,
            filter: "blur(8px)",
            y: 30,
          },
          {
            opacity: 1,
            filter: "blur(0px)",
            y: 0,
            duration: 1,
            ease: "sine.out",
            scrollTrigger: {
              trigger: container,
              start: "top bottom-=100",
              toggleActions: "play complete none none",
            },
          }
        );
      });
    }, 1500); // Wait 1.5s for main page animations
  });
</script> -->
