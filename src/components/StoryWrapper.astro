---
import { getCollection } from "astro:content";
const stories = await getCollection("stories");

const latestStories = stories
  .sort((a: any, b: any) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, 5);
---

<section
  id="story-wrapper"
  class="relative w-full h-[600px] bg-black overflow-hidden rounded-[16px]"
>
  {
    latestStories.map((story: any, index: any) => (
      <div
        class="story-slide absolute inset-0 opacity-0 invisible flex flex-col"
        data-index={index}
      >
        {story.data.type === "image" ? (
          <>
            <div class="absolute inset-0 z-0">
              <img
                src={story.data.imageSrc}
                alt=""
                class="w-full h-full object-cover"
              />
            </div>
            <div class="absolute flex flex-col w-full bottom-0 p-6 text-white z-10 bg-gradient-to-t from-black to-transparent">
              <p>{story.data.content}</p>
              <time>{story.data.date}</time>
            </div>
          </>
        ) : story.data.type === "noImage" ? (
          <div class="absolute inset-0 flex items-center justify-center bg-gradient-to-b from-neutral-900 to-blue-300">
            <p class="text-white text-3xl text-center font-medium leading-relaxed">
              {story.data.content}
            </p>
          </div>
        ) : null}
      </div>
    ))
  }

  <header
    class="absolute w-full p-6 z-10 flex flex-col gap-4 bg-gradient-to-b from-black to-transparent"
  >
    <div class="story-progress flex gap-2">
      {
        latestStories.map((_: any, index: any) => (
          <div class="flex-1 h-[3px] bg-white/30 rounded-full overflow-hidden">
            <div class="progress-fill h-full w-0 bg-white" data-index={index} />
          </div>
        ))
      }
    </div>
    <div class="flex gap-2 items-center text-white">
      <img
        class="w-8 h-8 rounded-full"
        src="/images/profileAvatar.jpg"
        alt=""
      />
      <p class="font-medium">Jeremy</p>
    </div>
  </header>

  <button
    id="prev-story"
    class="absolute top-0 left-0 h-full w-1/2 bg-transparent border-none cursor-pointer z-10"
    aria-label="Previous story"
  >
    <span class="sr-only">Previous</span>
  </button>
  <button
    id="next-story"
    class="absolute top-0 right-0 h-full w-1/2 bg-transparent border-none cursor-pointer z-10"
    aria-label="Next story"
  >
    <span class="sr-only">Next</span>
  </button>
</section>

<style>
  .story-slide {
    transition:
      opacity 0.8s ease,
      visibility 0.8s ease;
  }

  .story-slide.active {
    opacity: 1;
    visibility: visible;
    z-index: 10;
  }

  .progress-fill {
    transition: width linear;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
  }
</style>

<script>
  function initStoryController() {
    class StoryController {
      private wrapper: HTMLElement;
      private slides: HTMLElement[];
      private progressBars: HTMLElement[];
      private currentIndex: number = 0;
      private timer: number | null = null;
      private duration: number = 6000; // 6 seconds

      constructor() {
        this.wrapper = document.getElementById("story-wrapper")!;
        this.slides = Array.from(document.querySelectorAll(".story-slide"));
        this.progressBars = Array.from(
          document.querySelectorAll(".progress-fill")
        );

        if (this.slides.length > 0) {
          this.init();
        }
      }

      private init() {
        this.showSlide(0);

        const prevButton = document.getElementById("prev-story");
        const nextButton = document.getElementById("next-story");

        prevButton?.addEventListener("click", (e) => {
          e.preventDefault();
          this.prevSlide();
        });

        nextButton?.addEventListener("click", (e) => {
          e.preventDefault();
          this.nextSlide();
        });

        this.startTimer();
      }

      private showSlide(index: number) {
        this.slides.forEach((slide) => slide.classList.remove("active"));
        this.slides[index].classList.add("active");

        this.progressBars.forEach((bar, i) => {
          bar.style.transition = "none";
          bar.style.width = i < index ? "100%" : i === index ? "0%" : "0%";
        });

        this.progressBars[index].offsetHeight;
        this.progressBars[index].style.transition =
          `width ${this.duration}ms linear`;
        this.progressBars[index].style.width = "100%";

        this.currentIndex = index;
      }

      private startTimer() {
        if (this.timer) clearTimeout(this.timer);

        this.timer = window.setTimeout(() => {
          this.nextSlide();
        }, this.duration);
      }

      private nextSlide() {
        const nextIndex = (this.currentIndex + 1) % this.slides.length;
        this.showSlide(nextIndex);
        this.startTimer();
      }

      private prevSlide() {
        const prevIndex =
          this.currentIndex === 0
            ? this.slides.length - 1
            : this.currentIndex - 1;
        this.showSlide(prevIndex);
        this.startTimer();
      }
    }

    new StoryController();
  }

  initStoryController();

  document.addEventListener("astro:page-load", () => {
    initStoryController();
  });

  document.addEventListener("astro:before-swap", () => {
    const prevButton = document.getElementById("prev-story");
    const nextButton = document.getElementById("next-story");
    prevButton?.removeEventListener("click", () => {});
    nextButton?.removeEventListener("click", () => {});
  });
</script>
