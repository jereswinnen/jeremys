---
import "../assets/styles/global.scss";
import Aside from "../components/Aside.astro";
import Button from "../components/Button.astro";
import Header from "../components/Header.astro";

const { title, description, theme, layout } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>
      {title ? `${title} | Jeremy Swinnen` : "Jeremy Swinnen"}
    </title>
    {description && <meta name="description" content={description} />}
  </head>
  <body
    class={`${theme ? theme : ""} o-container font-sans bg-white dark:bg-stone-950 text-stone-900 dark:text-white/85 selection:bg-stone-200 selection:dark:bg-stone-400`}
  >
    <div class={`o-grid o-grid--${layout || "default"}`}>
      {layout === "home" && <Aside class="md:sticky md:top-0" />}
      <main class="o-grid--inner outline-none">
        <Header
          data-blurRevealFromTop
          class="md:sticky md:top-0 col-span-full"
          logo={layout === "home" ? false : true}
        />
        <slot />
      </main>
      <footer
        data-footerScrollExpand
        class="o-grid--bleed col-span-full bg-stone-950 text-white dark:bg-white dark:text-stone-900 py-16"
      >
        <div data-footerContent class="o-grid o-grid--default">
          <header class="col-span-full o-grid--inner">
            <p class="col-span-2 text-balance">
              I&rsquo;m currently available for new projects. Interested in
              working together?
            </p>
            <div class="col-span-6 flex gap-6 items-center justify-end">
              <span data-currentTime></span>
              <span class="opacity-60">&copy;2025</span>
            </div>
          </header>
          <Button
            data-copyEmail
            class="col-span-full mx-auto w-fit text-center tracking-tight !px-[8vw] !pb-[1.5vw] !text-[10vw] !normal-case !border-[0.3vw] !text-white dark:!text-stone-900 hover:!bg-white hover:dark:!bg-stone-900 [&>*:first-child]:hover:!text-stone-900 [&>*:first-child]:hover:dark:!text-white [&>span]:!bg-white [&>span]:dark:!bg-stone-900"
            href="mailto:hey@jeremys.be"
            label="Letâ€™s talk"
          />
        </div>
      </footer>
    </div>
  </body>
</html>

<!-- <script>
  document.addEventListener("DOMContentLoaded", () => {
    const cursor = document.createElement("div");
    cursor.classList.add("animated-cursor");
    document.body.style.cursor = "none";
    document.body.appendChild(cursor);

    document.addEventListener("mousemove", (e) => {
      cursor.style.left = `${e.clientX}px`;
      cursor.style.top = `${e.clientY}px`;
    });
  });
</script> -->

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const emailButtons = document.querySelectorAll("[data-copyEmail]");

    emailButtons.forEach((button) => {
      const copyEmail = async (e: any) => {
        e.preventDefault();

        const href =
          button instanceof HTMLAnchorElement
            ? button.getAttribute("href")
            : null;
        if (!href) return;

        const emailAddress = href.replace("mailto:", "");
        const labelElement = button.querySelector("span");
        const originalLabel = labelElement?.textContent || "";

        try {
          if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(emailAddress);
          } else {
            // Fallback for older browsers
            const input = document.createElement("input");
            input.type = "text";
            input.value = emailAddress;
            input.style.position = "absolute";
            input.style.opacity = "0";
            document.body.appendChild(input);
            input.select();
            input.setSelectionRange(0, 99999); // Ensures mobile compatibility
            document.body.removeChild(input);
          }

          // Show "Copied!" feedback
          if (labelElement) {
            labelElement.textContent = "Copied!";
            setTimeout(() => {
              labelElement.textContent = originalLabel;
            }, 2000);
          }
        } catch (err) {
          console.error("Clipboard copy failed:", err);
        }
      };

      // Attach both click and touchend for mobile support
      button.addEventListener("click", copyEmail);
      button.addEventListener("touchend", copyEmail, { passive: true });
    });
  });
</script>

<script>
  function updateTime() {
    const options: Intl.DateTimeFormatOptions = {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
      timeZone: "Europe/Brussels",
    };

    const timeElements = document.querySelectorAll("[data-currentTime]");

    timeElements.forEach((el) => {
      if (el instanceof HTMLElement) {
        const timeString = new Intl.DateTimeFormat("en-GB", options).format(
          new Date()
        );
        el.innerHTML = timeString.replace(":", `<span class="blink">:</span>`);
      }
    });
  }

  function toggleBlink() {
    document.querySelectorAll(".blink").forEach((colon) => {
      if (colon instanceof HTMLElement) {
        colon.style.opacity = colon.style.opacity === "0" ? "1" : "0";
      }
    });
  }

  setInterval(updateTime, 60000);
  setInterval(toggleBlink, 800);
  updateTime();
</script>

<script>
  import {
    // typewriterEffect,
    // imageClipFromBottom,
    // textBlurFadeIn,
    // imageBlurReveal,
    // projectListImageReveal,
    // blurRevealFromTop,
    // blurRevealFromBottom,
    // blurRevealFromLeft,
    footerScrollExpand,
    // emailCopyEffect,
  } from "../assets/scripts/gsapAnimations.js";
  // typewriterEffect();
  // imageClipFromBottom();
  // textBlurFadeIn();
  // imageBlurReveal();
  // projectListImageReveal();
  // blurRevealFromTop();
  // blurRevealFromBottom();
  // blurRevealFromLeft();
  footerScrollExpand();
  // emailCopyEffect();
</script>
