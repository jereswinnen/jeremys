---
import MasterLayout from "../../layouts/MasterLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import ArticleEntry from "../../components/blog/ArticleEntry.astro";
import NoteEntry from "../../components/blog/NoteEntry.astro";
import LinkEntry from "../../components/blog/LinkEntry.astro";
import BookEntry from "../../components/blog/BookEntry.astro";

const title = "Blog";
const theme = "bg-orange-500";

type NoteEntry = CollectionEntry<"notes">;
type LinkEntry = CollectionEntry<"links">;
type ArticleEntry = CollectionEntry<"articles">;
type BookEntry = CollectionEntry<"books">;
type ContentEntry = NoteEntry | LinkEntry | ArticleEntry | BookEntry;

// Fetch all content types
const notes = await getCollection(
  "notes",
  ({ data }: NoteEntry) => !data.draft
);
const links = await getCollection(
  "links",
  ({ data }: LinkEntry) => !data.draft
);
const articles = await getCollection(
  "articles",
  ({ data }: ArticleEntry) => !data.draft
);
const books = await getCollection(
  "books",
  ({ data }: BookEntry) => !data.draft
);

// Process entries to include their rendered content
const processedEntries = await Promise.all([
  ...notes.map(async (entry: NoteEntry) => {
    const { Content } = await entry.render();
    return { entry, Content };
  }),
  ...links.map(async (entry: LinkEntry) => {
    const { Content } = await entry.render();
    return { entry, Content };
  }),
]);

// Create a map of entry IDs to their Content components
const contentMap = new Map(
  processedEntries.map(({ entry, Content }) => [entry.id, Content])
);

// Combine and sort by date
const allContent = [...notes, ...links, ...articles, ...books].sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

// Group by date
const contentByDate = allContent.reduce(
  (acc: Record<string, ContentEntry[]>, entry) => {
    const date = entry.data.date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    if (!acc[date]) {
      acc[date] = [];
    }

    acc[date].push(entry);
    return acc;
  },
  {}
);

const formatTime = (date: Date) => {
  return date.toLocaleTimeString("nl-BE", {
    hour: "2-digit",
    minute: "2-digit",
    timeZone: "Europe/Brussels",
  });
};
---

<MasterLayout theme={theme} title={title}>
  <section
    data-blurRevealFromBottom
    class="col-span-full grid grid-cols-subgrid gap-y-[calc(var(--u-grid-gap)_*_1.25)]"
  >
    <section
      data-speed="0.8"
      class="col-span-full grid grid-cols-subgrid h-[30vh] content-end"
    >
      <header class="col-span-full md:!col-span-5">
        <h2
          data-textlurFadeIn
          class="font-serif text-[clamp(40px,6vw,100px)] tracking-tight leading-tight indent-8 md:indent-32 text-balance"
        >
          {title}
        </h2>
      </header>
    </section>
    <section
      class="col-span-full grid grid-cols-subgrid [&>*:not(:first-child)]:pt-8 [&>*:not(:last-child)]:pb-8 divide-y-2 divide-black/15 dark:divide-white/15"
    >
      {
        Object.entries(contentByDate).map(([date, entries]) => (
          <section class="col-span-full md:!col-start-3 md:!col-span-3 flex flex-col gap-8">
            <time
              class="text-2xl font-semibold"
              datetime={entries[0].data.date.toISOString()}
            >
              {date}
            </time>
            <div class="flex flex-col [&>*:not(:first-child)]:pt-5 [&>*:not(:last-child)]:pb-5 divide-y divide-black/15 dark:divide-white/15">
              {entries.map((entry) => {
                const datetime = entry.data.date.toISOString();
                const time = formatTime(entry.data.date);
                const Content = contentMap.get(entry.id);

                return (
                  <article class="grid grid-cols-[1fr_6fr] gap-x-4">
                    {entry.collection === "articles" && (
                      <ArticleEntry
                        entry={entry as CollectionEntry<"articles">}
                        datetime={datetime}
                        time={time}
                      />
                    )}

                    {entry.collection === "notes" && (
                      <NoteEntry
                        entry={entry as CollectionEntry<"notes">}
                        datetime={datetime}
                        time={time}
                        Content={Content}
                      />
                    )}

                    {entry.collection === "links" && (
                      <LinkEntry
                        entry={entry as CollectionEntry<"links">}
                        datetime={datetime}
                        time={time}
                        Content={Content}
                      />
                    )}

                    {entry.collection === "books" && (
                      <BookEntry
                        entry={entry as CollectionEntry<"books">}
                        datetime={datetime}
                        time={time}
                      />
                    )}
                  </article>
                );
              })}
            </div>
          </section>
        ))
      }
    </section>
  </section>
</MasterLayout>
